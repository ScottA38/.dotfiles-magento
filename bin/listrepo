#!/usr/bin/env python3

import requests
from requests.auth import HTTPBasicAuth
import os
import os.path as path
from git import Repo
from getpass import getpass
import argparse
import pprint as pp
from sys import argv
import json

def list_repositories(args, pat):
    """Use POST request to make a new Github repository using supplied parameters in 'args'"""
    print(construct_url(args))
    return requests.get(construct_url(args), \
    auth=HTTPBasicAuth(args.username, pat), \
    timeout=5)

def construct_url(args):
    if (args.reponame):
        return f"https://api.github.com/repos/{args.username}/{args.reponame}"

    return 'https://api.github.com/user/repos'

def parse_dir(dir=os.getcwd()):
    """Function to inspect all files and return a dict of the file names and content"""
    files_json = {}
    try:
        for file in os.listdir(dir):
            if path.splitext(file)[1] in [".txt", ".md"] and not (file[0] == "." or path.isdir(file)):
                with open(f"{dir}/{file}", "r") as to_read:
                    files_json[file] = { "content": to_read.read() }
        return files_json
    except Exception as e:
        print(f"Failed on ${file}: ${str(e)}")

def make_repo(args):
    try:
        pat = None
        list_repo_req = None
        expanded_path = path.expanduser(args.secrets)

        with open(expanded_path) as secrets:
            pat = json.load(secrets)['makerepo']

        list_repo_req = list_repositories(args, pat)

        # success case, repository is created and the URL of this repository is returned
        if list_repo_req.status_code == 200:
            return list_repo_req.json()
        else:
            raise requests.exceptions.RequestException()
    except requests.exceptions.ConnectionError as err:
        print("An error occurred when trying to connect github.")

        return False
    except requests.exceptions.RequestException:
        print(list_repo_req.json())
        print("Failed, HTTP code: {}\nMessages:\n{}".format(list_repo_req.status_code, list_repo_req.json()["message"]))
        if "errors" in list_repo_req.json().keys():
            for error in list_repo_req.json()["errors"]:
                print(error["message"])

        return False
    except KeyError:
        print("Could not identify key 'makerepo' in secrets file (should be json, should contain 'Personal Access Token' as value)")

        return False


parser = argparse.ArgumentParser(description='Create a new repo on a supplied (or default) github account')
parser.add_argument("--version", action="version", version='%(prog)s 1.1')
parser.add_argument('-N', '--name', metavar="name", dest="reponame", help="A specific repository to search for")
parser.add_argument('-U', '--user', default="ScottA38", metavar="username", dest="username", help="The username of the GitHub account to store a repository to")
parser.add_argument('-p', '--private', dest="private", default= False, action='store_true', help="Flag that the created repository should be a private repository")
parser.add_argument('-S', '--secrets-file', default="~/.secrets.json", metavar="secrets_file", dest="secrets", help="Path to secrets file containing json file with Github Personal Access Token in json format")
args = parser.parse_args()

URL = ""
output_fields=['name', 'ssh_url', 'html_url']

response = make_repo(args)

if (response):
    if not args.reponame:
        for repo in response:
            for field in output_fields:
                print(f'{field}: {repo[field]}')
    else:
        for field in output_fields:
            print(f'{field}: {response[field]}')
else:
    raise Exception("makerepo: Failed");
